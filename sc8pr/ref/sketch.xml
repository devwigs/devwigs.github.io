<Module name="sketch">
<Class name="Sketch"><span>Represents an interactive animation that runs in the Pygame window; supports sprites and GUI controls. In addition to the attributes described here, this class inherits the attributes of its superclass, <code class="Link" onclick="goRef('papplet')">PApplet</code>.</span>
	<Method name="Sketch(setup)"><span>The constructor creates a <code>Sketch</code> instance from a setup function. Use the <code>run</code> method to run the sketch.</span>
		<Arg name="setup(sk)" default="None">An unbound function that initializes the sketch.
			<Arg name="sk">A reference to the sketch.</Arg>
		</Arg>
	</Method>
	<Method name="simpleDraw()">Redraws the background and all visible sprites, and then updates all enabled sprites.</Method>
	<Method name="physicsDraw()"><span>Calls <code>simpleDraw</code> and then updates colliding masses based on simplified 2D physics.</span></Method>
	<Method name="drawWall(color, weight)"><span>Draw a wall around the edges of the sketch; called automatically by <code>simpleDraw</code>.</span>
		<Arg name="color">The color to use for rendering the wall.</Arg>
		<Arg name="weight" default="1">The thickness of the wall in pixels.</Arg>
	</Method>
	<Method name="animate(draw, eventMap)">Specifies a new drawing function and event map to control the animation.
		<Arg name="draw(sk)" default="None">An unbound function that draws one frame of the animation.
			<Arg name="sk">A reference to the sketch.</Arg>
		</Arg>
		<Arg name="eventMap" default="None"><span>A dictionary that maps event types or classes (keys) to handler functions (values). You can use <code>None</code> as a key to specify a handler for events that do not have a custom handler.</span></Arg>
	</Method>
	<Method name="resize(size, mode, ev)">Changes the display size and optionally the mode as well. Adjusts the size to match the aspect ratio of the background image and scales all sprites to the new sketch size.
		<Arg name="size">A tuple specifying the desired size of the sketch.</Arg>
		<Arg name="mode" default="None"><span>An integer specifying the desired display mode. Set this to <code>pygame.RESIZABLE</code> to make the sketch user resizable, or to <code>0</code> to keep the size fixed.</span></Arg>
		<Arg name="ev" default="None"><span>When the called by the <code>run</code> method as a result of a user resize event, the event instance is passed; <code>resize</code> will add an <code>adjustSize</code> attribute to the event if it needs to modify the requested size to match the background image aspect ratio.</span></Arg>
	</Method>
	<Method name="sound(key, cache, **kwargs) → pygame.mixer.Sound"><span>Loads and plays a sound file.</span>
		<Arg name="key">The name of the sound file, or the key if playing a cached sound.</Arg>
		<Arg name="cache" default="True">Specifies whether to keep the sound object in the cache.</Arg>
		<Arg name="kwargs"><span>Additional arguments to be passed to the sound’s <code>play</code> method.</span></Arg>
	</Method>
	<Method name="loadSounds(*args)"><span>Pre-load a sound file into the cache.</span>
		<Arg name="args"><span>A sequence of strings specifying the files to load. Alternatively, any string can be replaced by a 2-tuple containing the file name and a key to be used to reference the sound instead of its file name.</span></Arg>
	</Method>
	<Method name="prompt(msg, validator, default, title, minSize, **kwargs)"><span>Request asynchronous user input in a GUI dialog. This method is described in detail in the <span class="Link" onclick="tutorial('input')">tutorial</span>.</span>
		<Arg name="msg">Text to display as a prompt.</Arg>
		<Arg name="validator" default="str">A type or function to validate the raw input.</Arg>
		<Arg name="default" default="&quot;&quot;">Default response to display.</Arg>
		<Arg name="title" default="None">The dialog title.</Arg>
		<Arg name="minSize" default="(144,1)">The minimum size of the dialog.</Arg>
		<Arg name="kwargs"><span>See the <span class="Link" onclick="tutorial('input')">tutorial</span> for details.</span></Arg>
	</Method>
	<Method name="fileDialog(mode, allowCancel, initFilter)"><span>Run an asynchronous GUI dialog to select a file or folder. This method is described in detail in the <span class="Link" onclick="tutorial('file')">tutorial</span>.</span>
		<Arg name="mode" default="OPEN"><span>One of the constants <code>OPEN</code>, <code>SAVE</code>, <code>FOLDER</code>.</span></Arg>
		<Arg name="allowCancel" default="True">specifies whether the user can cancel the dialog without selecting a file or folder.</Arg>
		<Arg name="initFilter" default="'*.*'">A pattern that specifies which files to display.</Arg>
	</Method>
	<PropA name="wall" default="None"><span>Assign a color to this property to create a wall around the sketch. Call the <code>setBackground</code> method after setting the wall color to draw the wall. This property affects the default edge behaviour of sprites.</span></PropA>
	<PropR name="frameNumber"><span>The number of frames that have been drawn (including the current frame) since the <code>animate</code> method was last called.</span></PropR>
	<PropR name="draw" default="simpleDraw"><span>A reference to the current drawing function. Use the <code>animate</code> method to change the drawing function.</span></PropR>
	<PropR name="sprites"><span>A reference to the <code>SpriteList</code> instance that represents all sprites currently in the sketch.</span></PropR>
	<PropR name="io"><span>A reference to the GUI dialog object created by the <code>prompt</code> or <code>fileDialog</code> methods. Will be <code>None</code> when no such dialog is running.</span></PropR>
</Class>

<Class name="Sprite">Represents a graphical object or character that can be drawn on top of the sketch background and is capable of interaction.
	<Method name="Sprite(sprites, costume, *group, **kwargs)"><span>The constructor creates a <code>Sprite</code> instance from the <code>costume</code> argument.</span>
		<Arg name="sprites"><span>A reference to the <code>Sketch</code> or <code>SpriteList</code> instance to which the sprite is being added.</span></Arg>
		<Arg name="costume">An image, sequence of images, or file name specifying the sprite’s costumes.</Arg>
		<Arg name="group" default="()"><span>A sequence of <code>set</code> instances representing the group(s) to which the sprite belongs.</span></Arg>
		<Arg name="kwargs" default="{}">A dictionary of the sprite’s initial properties.</Arg>
	</Method>
	<Method name="config(**kwargs) → self"><span>Modifies the sprite’s assignable properties as specified by <code>kwargs</code>.</span></Method>
	<Method name="frameStep()"><span>Advances the sprite’s properties by one frame; for example, if the sprite has a <code>spin</code> property it will be used to recalculate the sprite’s <code>angle</code> property.</span></Method>
	<Method name="calcRect() → pygame.Rect"><span>Recalculate the <code>rect</code> property; called by the <code>config</code> and <code>frameStep</code> methods.</span></Method>
	<Method name="getSize(rotated) → tuple"><span>Return the current size of the sprite.</span>
		<Arg name="rotated"><span>A <code>bool</code> specifying whether the size is to be calculated before (<code>False</code>) or after (<code>True</code>) the sprite image is rotated.</span></Arg>
	</Method>
	<Method name="corners() → tuple"><span>Return a 4-tuple containing the coordinates of the rotated sprite’s four corners.</span></Method>
	<Method name="contains(*pts) → bool"><span>Returns whether the sprite’s rectangle or circle (depending on its <code>radius</code> property) contains any of the specified points.</span>
		<Arg name="pts"><span>The point or points to be compared to the sprite’s location.</span></Arg>
	</Method>
	<Method name="exclude(pt)"><span>Move the sprite so that it does not overlap the specified point.</span>
		<Arg name="pt"><span>The point to exclude.</span></Arg>
	</Method>
	<Method name="toward(posn, mag) → tuple"><span>Returns a vector (as a 2-tuple of numbers) of the specified magnitude pointing from the sprite’s position toward the specified point. This can be used to set the <code>velocity</code> or <code>accel</code> properties to make the sprite move toward a certain location.</span>
		<Arg name="posn"><span>The point toward which the vector points.</span></Arg>
		<Arg name="mag" default="1"><span>The magnitude of the vector.</span></Arg>
	</Method>
	<Method name="costumeSequence(costume, end, oscillate)"><span>Specify the order in which the sprite’s costumes are to be changed.</span>
		<Arg name="costume" default="0"><span>This can be the sequence of costumes as a <code>list</code> or <code>tuple</code>; or the index of the first costume to be displayed.</span></Arg>
		<Arg name="end" default="-1"><span>The index of the last costume in the sequence; only used if the <code>costume</code> argument is an <code>int</code>.</span></Arg>
		<Arg name="oscillate" default="False"><span>Specifies whether the sequence is to repeated in reverse order.</span></Arg>
	</Method>
	<Method name="colliding(group, collided) → bool"><span>Determine whether the sprite is colliding with any of the sprites in <code>group</code>.</span>
		<Arg name="group" default="None"><span>A sequence of sprites to check for collisions; if <code>None</code>, all sprites in the sketch sprite list are checked.</span></Arg>
		<Arg name="collided" default="collide_sprite"><span>A function used to determine if a collision is occurring.</span></Arg>
	</Method>
	<Method name="collisions(group=None, collided=collide_sprite) → set"><span>Returns a <code>set</code> of sprites from the specified <code>group</code> that are colliding with the current sprite.</span>
		<Arg name="group" default="None"><span>A sequence of sprites to check for collisions; if <code>None</code>, all sprites in the sketch sprite list are checked.</span></Arg>
		<Arg name="collided" default="collide_sprite"><span>A function used to determine if a collision is occurring.</span></Arg>
	</Method>
	<Method name="transform(shift, factor)"><span>Scales and translates the sprite; this method is called automatically when the sketch is resized.</span>
		<Arg name="shift" default="(0,0)"><span>A vector describing the translation to apply.</span></Arg>
		<Arg name="factor" default="1"><span>A number describing the scale transformation.</span></Arg>
	</Method>
	<Method name="remove()">Remove the sprite from the sprite list; should not be called while iterating through the sprites.
	</Method>
	<Method name="top()">Move the sprite to the end of the sprite list so that is drawn as the top layer; should not be called while iterating through the sprites.
	</Method>
	<PropA name="update" default="frameStep"><span>A reference to a function that updates the sprite’s properties whenever a frame is drawn.</span></PropA>
	<PropA name="costumes"><span>A sequence of images representing the sprite’s “costumes”; returns a <code>list</code>.</span></PropA>
	<PropA name="posn" default="(0,0)">An ordered pair describing the sprite’s position within the sketch.</PropA>
	<PropA name="velocity" default="(0,0)">An ordered pair describing the sprite’s velocity.</PropA>
	<PropA name="accel" default="(0,0)">An ordered pair describing the sprite’s acceleration.</PropA>
	<PropA name="jerk" default="(0,0)">An ordered pair describing the rate of change of the sprite’s position.</PropA>
	<PropA name="zoom" default="1">The size of the sprite relative to the size of the costume image.</PropA>
	<PropA name="width">The width of the zoomed, unrotated sprite.</PropA>
	<PropA name="height">The height of the zoomed, unrotated sprite.</PropA>
	<PropA name="zoomRate" default="0"><span>The relative rate at which the <code>zoom</code> property changes. For example, a value of <code>-0.01</code> decreases the <code>zoom</code> value by 1% per frame.</span></PropA>
	<PropA name="angle" default="0">The number of degrees clockwise to rotate the sprite’s costume before drawing it. Negative values indicate counter-clockwise rotation.</PropA>
	<PropA name="spin" default="0"><span>The number of degrees by which the <code>angle</code> property changes per frame</span>.</PropA>
	<PropA name="orient" default="False"><span>Indicates whether to recalculate the <code>angle</code> property to match the direction of the <code>velocity</code></span>.</PropA>
	<PropA name="elasticity" default="1.0"><span>The proportion of the “kinetic energy” to conserve on <code>BOUNCE</code> actions.</span></PropA>
	<PropA name="drag" default="0.0"><span>An amount by which to reduce the velocity each frame. For example, a value of <code>0.01</code> reduced the velocity by 1% each frame.</span></PropA>
	<PropA name="spinDrag" default="0.0">An amount by which to reduce the spin each frame.</PropA>
	<PropA name="status" default="VISIBLE"><span>An <code>int</code> constant indicating whether the sprite is to be drawn and/or update. Values are <code>VISIBLE</code>, <code>HIDDEN</code>, or <code>DISABLED</code>.</span></PropA>
	<PropA name="currentCostume" default="0">The index specifying the sprite’s current costume.</PropA>
	<PropA name="costumeTime" default="0">The period (number of frames) at which the costume changes.</PropA>
	<PropA name="radius" default="None"><span>Setting a radius causes the sprite to be treated as a circle rather than a rectangle for collisions. Assigning a value of <code>True</code> causes the radius to be calculated from the width and height of the sprite.</span></PropA>
	<PropA name="edge"><span>An <code>int</code> constant indicating what action is to be taken when the sprite reaches the edge of the sketch. Values are <code>BOUNCE</code>, <code>WRAP</code>, <code>REMOVE</code>, <code>HIDDEN</code>, <code>DISABLED</code>, or <code>NO_EDGE</code>.</span></PropA>
	<PropA name="bounceThreshhold" default="0"><span>The speed below which a <code>BOUNCE</code> operation considers the perpendicular velocity to be zero.</span></PropA>
	<PropR name="index">The sprite’s position within the sprite list; determines the order in which sprites are drawn.</PropR>
	<PropR name="rect"><span>This property describes the sprite’s blit rectangle. For efficiency, it is not updated every time it is accessed; rather, the <code>frameStep</code> method updates the <code>rect</code> property once per frame. Each call to the <code>config</code> method also recalculates it. If properties affecting the blit rectangle e.g. (<code>posn</code>, <code>angle</code>, <code>zoom</code>, <code>height</code>, <code>width</code>) are modified outside of <code>frameStep</code> or <code>config</code>, the <code>rect</code> property will be stale. You can call the <code>calcRect</code> method to recalculate it.</span></PropR>
	<PropR name="size">The current zoomed size of the sprite as a (width, height) tuple.</PropR>
	<PropR name="image">An image of the sprite’s current costume that has been zoomed and rotated according to the sprite properties.</PropR>
	<PropR name="edgeAdjust"><span>This property is set to <code>True</code> or <code>False</code> by the <code>frameStep</code> method to indicate whether or not the sprite’s properties have been adjusted as a result of an edge effect (e.g. <code>BOUNCE</code>, <code>WRAP</code>, etc.).</span></PropR>
</Class>

<Class name="SpriteList"><span>Represents the sequence of sprites that have been added to a sketch. The sketch’s <code>sprites</code> attribute is a reference to the <code>SpriteList</code> instance, which is created automatically by the <code>Sketch</code> constructor.</span>
</Class>

<Function name="collide_rect(left, right) → bool">Determines whether two sprites are colliding based on whether their blit rectangles are overlapping.  This is the simplest (i.e. fastest) but least accurate collision detection.
	<Arg name="left"><span>A <code>Sprite</code> instance.</span></Arg>
	<Arg name="right"><span>A second <code>Sprite</code> instance.</span></Arg>
</Function>

<Function name="collide_shape(left, right) → bool"><span>Determines whether two sprites are colliding based on whether their shape models overlap. For efficiency, shapes are checked only when the blit rectangles are determined to overlap.</span>
	<Arg name="left"><span>A <code>Sprite</code> instance.</span></Arg>
	<Arg name="right"><span>A second <code>Sprite</code> instance.</span></Arg>
</Function>

<Function name="collide_shape_only(left, right) → bool"><span>Determines whether two sprites are colliding based on whether their shape models overlap. This function does not check the blit rectangles, making it slower. Useful when the shape model extends outside the blit rectangle.</span>
	<Arg name="left"><span>A <code>Sprite</code> instance.</span></Arg>
	<Arg name="right"><span>A second <code>Sprite</code> instance.</span></Arg>
</Function>

<Constant name="VISIBLE"><span>Used as a <code>Sprite</code> instance’s <code>status</code> property to indicate that the sprite is to be drawn and updated.</span></Constant>
<Constant name="HIDDEN"><span>Used as a <code>Sprite</code> instance’s <code>status</code> property to indicate that the sprite is to be updated but not drawn.</span></Constant>
<Constant name="DISABLED"><span>Used as a <code>Sprite</code> instance’s <code>status</code> property to indicate that the sprite is not to be drawn or updated.</span></Constant>
<Constant name="ENABLED">Indicates that a sprite is not disabled.</Constant>
<Constant name="BOUNCE">Indicates that the sprite bounces from all edges of the sketch.</Constant>
<Constant name="BOUNCE_X">Indicates that the sprite bounces from the sides of the sketch.</Constant>
<Constant name="BOUNCE_Y">Indicates that the sprite bounces from the top and bottom of the sketch.</Constant>
<Constant name="WRAP">Indicates that the sprite wraps to the far edge when crossing any edge of the sketch.</Constant>
<Constant name="WRAP_X">Indicates that the sprite wraps to the far edge when crossing the sides of the sketch.</Constant>
<Constant name="WRAP_Y">Indicates that the sprite wraps to the far edge when crossing the top or bottom of the sketch.</Constant>
<Constant name="REMOVE">Indicates that the sprite is to be removed when it passes any edge of the sketch.</Constant>
<Constant name="REMOVE_X">Indicates that the sprite is to be removed when it passes the sides of the sketch.</Constant>
<Constant name="REMOVE_Y">Indicates that the sprite is to be removed when it passes the top or bottom of the sketch.</Constant>

</Module>
