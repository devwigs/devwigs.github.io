<article><h1><code>ondraw</code> Handlers</h1><textarea class="Clip"></textarea>

<p>One of the most important events is the “draw” event. This event is triggered each time a graphics object is drawn, i.e. once per frame for each object. In the <code>setup</code> function below, we have created a text object which initially displays the number 0. The text object has an event handler, the function <code>updateTimer</code>, that is bound using the <code>ondraw</code> keyword. Each time the sketch draws the text to the screen, the <code>updateTimer</code> function will be called. Note that <em>ondraw</em> event handlers take a single argument which refers to the graphics object that has just been drawn.</p>

<pre class="Code" id="Ex1"><img class="CopyCode" src="img/copy.png" title="Copy Code to Clipboard" onclick="clipCopy('#Ex1')"/>from sc8pr import Sketch
from sc8pr.text import Text

def updateTimer(timer):
    <span class="Comment">"Update the text object to display the current time"</span>
    sk = timer.sketch
    t = sk.frameCount // sk.frameRate
    if t != timer.data:
        timer.config(data = t)

def setup(sk):
    timer = Text(0)<span class="Hilite">.bind(ondraw = updateTimer)</span>
    sk += timer.config(pos = sk.center, color = "blue", fontSize = 64)

Sketch().play("Time Counter")</pre>

<p>In our example, the <code>updateTimer</code> function calculates the time using the sketch’s <code>frameCount</code> and <code>frameRate</code> attributes (accessible via the graphic’s <code>sketch</code> attribute) and then sets this time as the text object’s <code>data</code> attribute. Note that the <code>if</code> statement is used to ensure that the text only gets re-rendered when necessary (i.e. when the data changes). It would be a waste of computing power to re-render the text on every frame.</p>

<p>Using the <code>frameCount</code> to determine the time will only be approximately correct since <code>pygame</code> does not maintain the frame rate perfectly. If your computer cannot run fast enough to maintain 60 frames per second, the timer will run slow. Also, the timer will pause when you drag the window since the frames will not be advancing. To create a more accurate timer based on the system clock, you can use Python’s <code>time</code> module.</p>

<pre class="Code" id="Ex2"><img class="CopyCode" src="img/copy.png" title="Copy Code to Clipboard" onclick="clipCopy('#Ex2')"/>from time import time
from math import floor
from sc8pr import Sketch
from sc8pr.text import Text

def updateTimer(timer):
    <span class="Comment">"Update the text object to display the current time"</span>
    t = floor(time() - <span class="Hilite">timer.start</span>)
    if timer.data != t:
        timer.config(data = t)

def setup(sk):
    timer = Text(0).bind(ondraw = updateTimer)
    sk += timer.config(pos = sk.center, color = "blue",
        fontSize = 64, <span class="Hilite">start = time()</span>)

Sketch().play("Time Counter")</pre>

<p>Note than in creating the timer, we have used the <code>config</code> method to set a custom attribute, <code>start</code>, that can be used by <code>updateTimer</code> to calculate the time.</p>

<p>Some types of graphics already have an <em>ondraw</em> event handler built in. For example, <code>Sprite</code> objects come with an event handler that is responsible for moving and spinning the sprite, changing costumes, and bouncing or wrapping at the sketch edges. If you want to give your sprites a custom <em>ondraw</em> handler, be sure it calls the default handler! The default handler name will be the object’s class connected by a dot to the event description, i.e. <code>Sprite.ondraw</code>...</p>

<pre class="Code" id="Ex3"><img class="CopyCode" src="img/copy.png" title="Copy Code to Clipboard" onclick="clipCopy('#Ex3')"/>from sc8pr import Sketch, Image, BOTH
from sc8pr.sprite import Sprite

def printUpdate(alien):
    print("My position is", alien.pos)
    <span class="Hilite">Sprite.ondraw(alien)</span>  <span class="Comment"># Default ondraw handler!</span>

def setup(sk):
    sk.bg = Image("sky.png")
    alien = Sprite("alien.png").bind(ondraw=printUpdate)
    sk += alien.config(
        pos = sk.center,
        width = sk.width/10,
        spin = -1,
        vel = (-1, 2),
        bounce = BOTH
    )

Sketch((512,362)).play()</pre>

<p>Try deleting the <span class="Hilite">blue</span> line in the program to see what happens!</p>

</article>