<article><h1><code>sc8pr.plot</code> Module</h1>
<p><b class="Comment">Experimental in v2.2.</b></p>

<p>This module defines features for plotting graphs, relying on the ability to attach coordinate systems to canvases (added in v2.2). This makes plotting simpler and more flexible than using the deprecated <a class="Hilite Code" href="javascript:goNode('plot_pkg')">sc8pr.misc.plot</a></code> module.</p>

<h4>Functions</h4><div class="Indent">
	<p><code><span class="Hilite">bars</span>(cv, x, y=None, width=1, **kwargs)</code> → <code>int</code>: Plot data as a bar graph; returns the number of bars added to the canvas.</p>
	<div class="Indent">
		<p><code class="Hilite">cv</code>: The canvas to draw on. Data will be plotted using the canvas’s atttached coordinate system, or pixel coordinates if no coordinate system has been attached.
		<p><code class="Hilite">x</code>, <code class="Hilite">y</code>: The data to plot. You can pass the <i>x</i> and <i>y</i> data as two separate sequences, or the data can be a single sequence of ordered pairs passed as <code>x</code> while <code>y</code> is <code>None</code></p>
		<p><code class="Hilite">width</code>: The width of the bars in coordinate system units.
		<p><code class="Hilite">**kwargs</code>: Additional arguments to configure the <code>Polygon</code> instances used to create the bars.
	</div>
	<p><code><span class="Hilite">gridlines</span>(cv, x=(0,1,2), y=(0,1,2), **config)</code> → <code>int</code>: Draws grid lines on the canvas; returns the number of <code>Line</code> instances added to the canvas.</p>
	<div class="Indent">
		<p><code class="Hilite">cv</code>: The canvas to draw on. Grid lines will be drawn using the canvas’s atttached coordinate system, or pixel coordinates if no coordinate system has been attached.
		<p><code class="Hilite">x</code>, <code class="Hilite">y</code>: Tuples or lists containing the lower and upper <i>x</i> or <i>y</i> values and, optionally, the interval. For example, <code>x = (0, 10, 2)</code> specifies grid lines at all mutliples of 2 between 0 and 10. The default value will draw a single gridline at <i>x</i> = 0, i.e. the <i>y</i>-axis.</p>
		<p><code class="Hilite">**config</code>: Additional arguments to configure the <code>Line</code> instances, such as <code>weight</code> and <code>stroke</code>.
	</div>
	<p><code><span class="Hilite">plot</span>(cv, x, y=None, markers=5, offset=None, **kwargs)</code> → <code>int</code>: Plot something at one or more on the canvas; returns the number of <code>Graphic</code> instances added to the canvas.</p>
	<div class="Indent">
		<p><code class="Hilite">cv</code>: The canvas to draw on. Data will be plotted using the canvas’s atttached coordinate system, or pixel coordinates if no coordinate system has been attached.
		<p><code class="Hilite">x</code>, <code class="Hilite">y</code>: The points to plot. You can pass the <i>x</i> and <i>y</i> data as two separate sequences, or the data can be a single sequence of ordered pairs passed as <code>x</code> while <code>y</code> is <code>None</code></p>
		<p><code class="Hilite">markers</code>: This can be: (1) an image (or <code>Graphic</code> instance that has an <code>image</code> property) or sequence of such images to be plotted at the coordinates specified by the <code>x</code> and <code>y</code> arguments; (2) a number specifying the radius of circular markers to be plotted; or (3) a string representing a format template, for example <code>{x:.1f}</code> to plot the <i>x</i> values rounded to one decimal place.
		<p><code class="Hilite">offset</code>: A 2-tuple or 2-list .
		<p><code class="Hilite">**kwargs</code>: Additional arguments to configure the <code>Text</code> or <code>Circle</code> instances used to create the markers.
	</div>
</div>

<!-- 
MatPlotLib...
def plotAsSurface(p, **kwargs)
def plotAsImage(p, **kwargs)
-->

</article></body>
</html>
