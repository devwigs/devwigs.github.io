<article><h1><code>sc8pr.Image</code> Class</h1>

<p>The <code>Image</code> class, a subclass of <code>Graphic</code>, represents bitmap images. In addition to the attributes it inherits from <code><a class="Hilite" href="javascript:goNode('graphic')">Graphic</a></code>, <code>Image</code> defines the following...</p>

<h4>Constructor</h4><div class="Indent">
	<p><code><span class="Hilite">Image</span>(data=(2,2), bg=None)</code></p>
		<div class="Indent">
		<p><code class="Hilite">data</code>: This can be a string specifying an image file to load, an existing <code>Image</code> or <code>pygame.Surface</code> instance to be “wrapped” into a new image, or a 2-tuple specifying the pixel size for a new image.</p>
		<p><code class="Hilite">bg</code>: The background color for the image.</p>
		</div>
</div>

<h4>Read-Only Properties</h4><div class="Indent">
	<p><code class="Hilite">image</code>: Returns a <code>pygame.Surface</code> of the scaled and rotated pixel data.</p>
	<p><code class="Hilite">original</code>: Returns the original <code>pygame.Surface</code> containing the unscaled and unrotated pixel data.</p>
</div>

<h4>Instance Methods</h4><div class="Indent">
	<p><code><span class="Hilite">copy</span>()</code> → <code>Image</code>: Copy the pixel data and wrap it as a new <code>Image</code> instance. This method applies any scaling and rotation but does not apply any <code>effects</code>. Use the <code>snapshot</code> method to apply effects.</p>
	<p><code><span class="Hilite">dumpCache</span>()</code> → <code>None</code>: Discards the cached pixel data for the scaled and/or rotated image. This should be called when the original pixel data of the image is modified.</p>
	<p><code><span class="Hilite">save</span>(fn)</code> → <code>self</code>: Saves the original (unscaled, unrotated) pixel data as an image file.  To save the transformed image, call the <code>copy</code> or <code>snapshot</code> methods before saving.</p>
	<p><code><span class="Hilite">tiles</span>(cols=1, rows=1, flip=0, padding=0)</code> → <code>list</code>: Slices the image into rectangular “tiles”.</p>
		<div class="Indent">
		<p><code class="Hilite">cols</code>: The number of columns.</p>
		<p><code class="Hilite">rows</code>: The number of rows.</p>
		<p><code class="Hilite">flip</code>: Set this to <code>HORIZONTAL</code>, <code>VERTICAL</code>, or <code>HORIZONTAL + VERTICAL</code> to include flipped copies of the tiles in the list.</p>
		<p><code class="Hilite">padding</code>: The number of pixels to discard around the outside of each tile.</p>
		</div>
</div>

<h4>Static Methods</h4><div class="Indent">
	<p><code><span class="Hilite">fromBytes</span>(data)</code> → <code>Image</code>: Create an <code>Image</code> instance from binary data. <b class="Comment">As of v2.1</b>, <code>data</code> can be any object that the <a class="Code" href="javascript:goNode('pixeldata')">PixelData</a> constructor can decode.</p>
	<!--p><code><span class="Hilite">fromPIL</span>(img, raw=False, compress=None)</code> → <code>Image</code> or <code>(bytes, bytes)</code>: Convert an image from Pillow format to an <code>Image</code> instance or raw <code>bytes</code> data; see <code><a href="javascript:goNode('graphic')">Graphic</a>.raw</code> for a description of the binary format. <b class="Comment">[Added in v2.1]</b></p>
		<div class="Indent">
		<p><code class="Hilite">img</code>: A Pillow image.</p>
		<p><code class="Hilite">raw</code>: Specify whether to return the image as binary data rather than as an <code>Image</code> instance.</p>
		<p><code class="Hilite">compress</code>: If raw binary data is requested, you can pass <code>zlib.compress</code> to compress the data.</p>
		</div-->

</div>

</article>