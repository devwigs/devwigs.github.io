<div>

<p>The <code>sketch</code> module includes a simple physics engine. To simulate physics-based collisions, assign a positive <code>mass</code> property to your sprites and use the <code class="Link" onclick="goRef('sketch','Sketch.physicsDraw')">physicsDraw</code> method as your drawing function. Here is an example...</p>

<pre class="Code">from sc8pr.sketch import Sketch, Sprite, WRAP_X, BOUNCE_Y
from sc8pr.image import Image
from random import uniform

<span class="Proto">def</span> setup(sk):

    <span class="Comment"># Load background and monster images</span>
    sk.setBackground("bg.png")
    img = Image("costume.png")

    <span class="Comment"># Create 10 random monster sprites</span>
    for i in range(10):
        velocity = uniform(-3, 3), uniform(-3, 3)
        posn = sk.randPixel()
        mass = uniform(0.5, 2)
        h = sk.height / 15 * mass
        Sprite(sk, img, height=h, <span class="Highlight">mass</span>=mass, edge=WRAP_X | BOUNCE_Y,
            elasticity=0.98, posn=posn, velocity=velocity).circle()
    sk.animate(<span class="Highlight">sk.physicsDraw</span>)

<span class="Comment"># Play the sketch</span>
Sketch(setup).play()</pre>

<p>If you create a custom drawing function, be sure to call the <code>physicsDraw</code> method to preserve the physics-based behaviour. Alternatively, run these three statements individually within your drawing function...</p>

<pre class="Code">sk.drawBackground()   <span class="Comment"># Redraw background</span>
sk.sprites.physics()  <span class="Comment"># Update colliding masses</span>
sk.sprites.draw()     <span class="Comment"># Redraw sprites</span></pre>

<p>The <code class="Link" onclick="goRef('sketch','Sprite.circle')">circle</code> method was called in the example above go that the sprites will be treated as circles when calculating their collision begaviour. Omitting the call to <code>circle</code> would result in the sprites being treated as rectangles. There is also a <code class="Link" onclick="goRef('sketch','Sprite.polygon')">polygon</code> method that lets you model the spriteâ€™s shape as a polygon.</p>

</div>