<article><h1><code>sc8pr.misc.video.Video</code> Class</h1>
<p><b class="Comment">Experimental!</b></p>

<p>The <code>Video</code> class renders and animates videos from frame images that are stored in a ZIP archive. Videos stored this way will result in a larger file than an MP4 but will usually load faster, and the frames do not need to be read sequentially as they do for MP4 and similar formats.</p>

<p>Use the <a class="Hilite Code" href="javascript:goNode('vidzip')">VidZip</a> class to transcode between FFmpeg-compatible formats like MP4 and a ZIP archive.</p>

<p>In addition to the attributes the <code>Video</code> class inherits from <a class="Hilite Code" href="javascript:goNode('sprite_class')">CostumeImage</a>, the following additional attributes are defined...</p>

<h4>Constructor</h4><div class="Indent">
	<p><code><span class="Hilite">Video</span>(zfile, alpha=False, **kwargs)</code></p>
		<div class="Indent">
		<p><code class="Hilite">zfile</code>: Path to the ZIP archive containing the frame images to be read.</p>
		<p><code class="Hilite">alpha</code>: A <code>bool</code> that specifies whether to convert the read images to support transparency; this would make loading slower but allows you to apply effects to the image that require transparency.</p>
		<p><code class="Hilite">kwargs</code>: Additional arguments to be passed to the <code>VidZip</code> constructor that is used for reading the data.</p>
		</div>
</div>

<pre class="Code" id="Ex1">from sc8pr import Sketch
from sc8pr.misc.video import Video

def setup(sk):
    mov = Video("movie.zip", alpha=True)
    sk.size = mov.size
    sk += mov.config(
        costumeTime = 2,                 <span class="Comment"># Sketch frames per video frame</span>
        costumeSequence = range(30, 90), <span class="Comment"># Video frame range to animate</span>
        pos = sk.center
    )

Sketch().play()</pre>

<h4>Read-Only Properties</h4><div class="Indent">
	<p><code class="Hilite">costumeList</code>: Unlike its superclass <code>CostumeImage</code>, the <code>Video</code> class does not store all of its costumes (frames) in memory as a list. The frames are kept in a ZIP archive and are read and decompressed as needed. The <code>costumeList</code> property returns a reference to the <code>VidZip</code> instance used for reading the frame data, and it can be used to access the frames in a list-like way. For example, if <code>vid</code> refers to a <code>Video</code> instance, <code>vid.costumeList[0]</code> will return the first frame of the video (in the original frame order) as a <code>PixelData</code> instance.</p>
	<p><code class="Hilite">fps</code>: The nominal frame rate of the video.</p>
</div>

<h4>Instance Method</h4><div class="Indent">
	<p><code><span class="Hilite">close</span>()</code> → <code>None</code>: Close the ZIP file containing the frame images.</p>
</div>

</article>