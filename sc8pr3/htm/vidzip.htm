<article><h1><code>sc8pr.misc.video.VidZip</code> Class</h1>
<p><b class="Comment">Experimental!</b></p>

<p>The <code>VidZip</code> class is used to convert video files into a ZIP archive of individual frames, and to read the archive data back in as <code>PixelData</code>.</p>

<h4>Constructor</h4><div class="Indent">
	<p><code><span class="Hilite">VidZip</span>(zfile, mode="r", **kwargs)</code></p>
		<div class="Indent">
		<p><code class="Hilite">zfile</code>: The path to the ZIP archive.</p>
		<p><code class="Hilite">mode</code>: The mode to use to open the archive.</p>
		<p><code class="Hilite">kwargs</code>: Additional arguments to be passed to the <a class="Hilite Code" href="https://docs.python.org/3/library/zipfile.html#zipfile.ZipFile" target="Py">ZipFile</a> constructor, such as <code>compression</code>.</p>
		</div>
</div>

<h4>Read-Only Property</h4><div class="Indent">
	<p><code class="Hilite">meta</code>: A dictionary containing the number of frames (<code>nframes</code>) and possibly the frame rate (<code>fps</code>), which should be specified if creating a new archive.</p>
</div>

<h4>Static Method</h4><div class="Indent">
	<p><code><span class="Hilite">decode</span>(mfile, zfile, size=None, start=0, frames=None, interval=1, replace=False, compression=ZIP_DEFLATED)</code> → <code>None</code>: Decode a movie file to an ZIP archive of images. The resulting archice can then be loaded as a <code>VidZip</code> instance.</p>
		<div class="Indent">
		<p><code class="Hilite">mfile</code>: Path to the input movie file.</p>
		<p><code class="Hilite">zfile</code>: Path to the output ZIP file.</p>
		<p><code class="Hilite">size</code>: Optional 2-tuple to resize the frame images before writing them.</p>
		<p><code class="Hilite">start</code>: The number of frames to omit at the beginning of the movie before writing to the ZIP archive.</p>
		<p><code class="Hilite">frames</code>: The number of frames to write to the ZIP archive; if omitted, all frames will be written to the end of the movie.</p>
		<p><code class="Hilite">interval</code>: A positive <code>int</code> specifying how often to write the frames; for example, setting this to <code>3</code> will write every third frame.</p>
		<p><code class="Hilite">replace</code>: A <code>bool</code> specifying whether to replace the output ZIP archive (<code>True</code>) or raise an exception (<code>False</code>) if the file already exists.</p>
		<p><code class="Hilite">compression</code>: The compression algorthim passed to the <code>ZipFile</code> constructor.</p>
		</div>
<pre class="Code" id="Ex1">from sc8pr.misc.video import VidZip

<span class="Comment"># This could take a while if it is a long movie...</span>
VidZip.decode("movie.mp4", "movie.zip", (512, 288))</pre>
</div>

<h4>Instance Methods</h4><div class="Indent">
	<p><code><span class="Hilite">__getitem__</span>(i)</code> → <code>PixelData</code> or <code>generator</code>: Returns the requested frame number if <code>i</code> is an integer, or a generator if a slice is provided.</p>
	<p><code><span class="Hilite">__iadd__</span></code> → <code>self</code>: A pseudonym for <code>capture</code>.</p>
	<p><code><span class="Hilite">capture</span>(self, *args, repeat=1)</code> → <code>self</code>: Adds images to the archive; allows for recording of the sketch.</p>
		<div class="Indent">
		<p><code class="Hilite">args</code>: One or more <code>PixelData</code> instances or objects that can be passed to the <code>PixelData</code> constrcutor.</p>
		<p><code class="Hilite">repeat</code>: The number of times to repeat each image as a frame in the video file.</p>
		</div>

<pre class="Code" id="Ex2">from sc8pr.misc.video import VidZip
from sc8pr import Sketch, Image
from sc8pr.sprite import Sprite

def setup(sk):
    sk.bg = Image("sky.png")
    sk += Sprite("alien.png").config(
        pos = sk.center,
        width = sk.width/10,
        spin = 1,
        vel = (2, 1)
    )

with VidZip("movie.zip", "x") as vzip:
    vzip.meta["fps"] = 20
    vzip.interval = 3
    Sketch((512,368)).config(capture=vzip).play()</pre>

    def clip(self, ):
	<p><code><span class="Hilite">clip</span>(zfile, mode="x", start=0, frames=None)</code> → <code>self</code>: Copies a subset of the video frames to a new ZIP archive.</p>
		<div class="Indent">
		<p><code class="Hilite">zfile</code>: Path to the output ZIP archive file.</p>
		<p><code class="Hilite">mode</code>: The mode to use to open the archive.</p>
		<p><code class="Hilite">start</code>: The frame number at which to start copying.</p>
		<p><code class="Hilite">frames</code>: The number of frames to copy; if <code>None</code>, all frames will be copied tpo the end of the video.</p>
		</div>

	<p><code><span class="Hilite">close</span>()</code> → <code>None</code>: Close the ZIP file.</p>
	<p><code><span class="Hilite">encode</span>(mfile, fps=None, size=None, start=0, frames=None, **kwargs)</code> → <code>self</code>: Encodes the images as a movie file using FFmpeg.</p>
		<div class="Indent">
		<p><code class="Hilite">mfile</code>: Path to the output movie file.</p>
		<p><code class="Hilite">fps</code>: The frame rate of the encoded movie; if not specified, it will be taken from the <code>meta</code> dictionary, or set to <code>30</code>.</p>
		<p><code class="Hilite">size</code>: A 2-tuple or list specifying the size of the movie to be written.</p>
		<p><code class="Hilite">start</code>: The number of frames to omit at the beginning of the video before writing to the media file.</p>
		<p><code class="Hilite">frames</code>: The number of frames to write to the media file; if omitted, all frames will be written to the end of the video.</p>
		<p><code class="Hilite">kwargs</code>: Additional arguments to be passed to <code>imageio.get_writer</code>.</p>
		</div>
<pre class="Code" id="Ex3">from sc8pr.misc.video import VidZip

with VidZip("movie.zip") as vzip:
    kwargs = {"size": (512, 288), "output_params": ["-vcodec", "ffv1"]}
    vzip.encode("movie.mkv", **kwargs)</pre>

</div>

</article>