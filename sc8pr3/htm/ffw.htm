<article>
<h1><code>sc8prx.ffmpeg.Writer</code> Class</h1>

<p><code>Writer</code> is used to encode media files using <a href="https://ffmpeg.org" target="ff">FFmpeg</a>. This class uses the <a href="https://imageio.readthedocs.io/en/stable/" target="im"><code>imageio</code></a> and <a href="https://imageio.readthedocs.io/en/stable/format_ffmpeg.html" target="im"><code>imageio-ffmpeg</code></a> packages as well as their dependencies (<code>numpy</code>, <code>Pillow</code>).</p>

<p>You can assign an <code>Writer</code> instance as the sketch’s <code>capture</code> attribute to record the sketch. The program below will record every second frame to produce a 30 frames per second movie when the sketch runs at 60 frames per second...</p>
<pre class="Code" id="Ex2">from sc8pr import Sketch
from sc8prx.ffmpeg import Writer

with Writer("movie.mkv", 30, output_params=["-vcodec", "ffv1"]) as ffw:
    ffw.interval = 2
    Sketch().config(capture=ffw).play()</pre>

<p>Call the <code>Writer</code> instance’s <code>write</code> method to write an individual frame to the movie file.</p>

<h4>Constructor</h4><div class="Indent">
	<p><code><span class="Hilite">Writer</span>(fn, fps=30, **kwargs)</code>: Create an instance to write the specified media file.</p>
		<div class="Indent">
		<p><code class="Hilite">fn</code>: The path to an FFmpeg-compatible media file to be encoded.</p>
		<p><code class="Hilite">fps</code>: The frame rate in frames-per-second.</p>
		<p><code class="Hilite">kwargs</code>: Additional arguments to be passed to <code>imageio.get_writer</code>. For example, to save the video using a lossless codec, you can use <code>output_params = ["-vcodec", "ffv1"]</code> as a keyword argument with an <code>mkv</code> container file.</p>
		</div>
</div>

<h4>Static Method</h4><div class="Indent">
	<p><code><span class="Hilite">encode</span>(zfile, mfile, fps=None, size=None, start=0, frames=None, **kwargs)</code> → <code>None</code>: Encodes images from a ZIP archive (created with <a class="Hilite Code" href="javascript:goNode('vidzip')">VidZip</a>) as a movie file using FFmpeg.</p>
		<div class="Indent">
		<p><code class="Hilite">mfile</code>: Path to the input ZIP archive.</p>
		<p><code class="Hilite">mfile</code>: Path to the output movie file.</p>
		<p><code class="Hilite">fps</code>: The frame rate of the encoded movie; if not specified, it will be taken from the <code>meta</code> dictionary, or set to <code>30</code>.</p>
		<p><code class="Hilite">size</code>: A 2-tuple or list specifying the size of the movie to be written.</p>
		<p><code class="Hilite">start</code>: The number of frames to omit at the beginning of the video before writing to the media file.</p>
		<p><code class="Hilite">frames</code>: The number of frames to write to the media file; if omitted, all frames will be written to the end of the video.</p>
		<p><code class="Hilite">kwargs</code>: Additional arguments to be passed to <code>imageio.get_writer</code>.</p>
		</div>

	<p><code><span class="Hilite">ffmpeg</span>(ff)</code> → <code>None</code>: Specifies the location of the FFmpeg executable if not included as part of the <code>imageio-ffmpeg</code> package.</p>
		<div class="Indent">
		<p><code class="Hilite">ff</code>: The path to the FFmpeg executable.</p>
		</div>
</div>

<h4>Instance Methods</h4><div class="Indent">
	<p><code><span class="Hilite">capture</span></code>: A pseudonym for <code>write</code>; allows the <code>Writer</code> to record the sketch.</p>
	<p><code><span class="Hilite">write</span>(srf)</code> → <code>self</code>: Write a single frame to the movie from from the provided image.</p>
		<div class="Indent">
		<p><code class="Hilite">srf</code>: A <code>pygame.Surface</code> or <code>Image</code> instance; or any object that has an <code>image</code> attribute containing a <code>pygame.Surface</code>, or that can be passed to the <code>Image</code> constructor.</p>
		</div>
	<p><code><span class="Hilite">writePIL</span>(pil)</code> → <code>self</code>: Write a <code>PIL.Image.Image</code> instance. This is faster than using <code>write</code> since it involves less format conversion. The image must be the same size as any previously written frames.</p>
	<p><code><span class="Hilite">writePixelData</span>(pix)</code> → <code>self</code>: Write the data from a <code>PixelData</code> instance. The image must be the same size as any previously written frames.</p>
</div>

</article></body>
</html>
