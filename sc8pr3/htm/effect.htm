<article><h1><code>sc8pr.effect</code> Package</h1>

<p>This package defines several classes for applying transitions and video effects. Effects can by applied to <code>sc8pr.Image</code> and <code>pygame.Surface</code> instances, as well as any <code>Graphic</code> subclasses that implement the <code>image</code> property.</p>

<p>Effects can also be applied to canvases and other graphics that have a <code>snapshot</code> method but no <code>image</code> property. This is done by rendering the object as an image before applying the effect. This can lead to slower drawing, and has the side effect of blocking mouse events to the canvas contents. Use with caution!</p>

<p> Effects are ignored by the event manager. This means that mouse actions are dispatched based on how the drawing would appear if there were no effects.</p>

<p>The video below shows some examples of animated effects.</p>

<div class="Center"><video controls src="misc/trDemo.mp4" width="512" height="288"/></div>
<p class="Center"><a href="misc/transition.py">Demo Source Code</a></p>

<p>All effects have an <code>apply</code> method which returns a <code>pygame.Surface</code> of the image after the effect is applied. In the example below, a “dissolve” effect is applied to the original image (<code>img</code>) to make only 25% of the pixels visible. The second argument is always a value between 0.0 and 1.0; its meaning depends on the specific effect being applied.</p>
<pre class="Code">from sc8pr import Sketch, Image
from sc8pr.effect import Dissolve

def setup(sk):
    img = Image("alien.png")    <span class="Comment"># Load original image</span>
    eff = Dissolve()            <span class="Comment"># Create effect</span>
    srf = eff.apply(img, 0.25)  <span class="Comment"># Apply effect to image</span>
    sk += Image(srf).config(pos=sk.center)

Sketch().play()</pre>

<p>Most of the effects can be animated. Set the graphic’s <code>effects</code> property to a list of effect instances as in the example below. Each effect should specify two time arguments over which the effect will be applied. In the example below, the image will “transition in” with the <code>Squash</code> effect between frames 0 and 180, and then will “transition out” with the <code>Dissolve</code> effect between frames 180 and 360. Note that the time arguments are in reverse order for the “dissolve out” effect.</p>

<pre class="Code">from sc8pr import Sketch, Image, LEFT
from sc8pr.effect import Dissolve, Squash

def setup(sk):
    img = Image("alien.png")
    img.effects = [
        Squash(LEFT).time(0, 180),  <span class="Comment"># Transition in (frames 0-180)</span>
        Dissolve().time(360, 180),  <span class="Comment"># Transition out (frames 180-360)</span>
    ]
    sk += img.config(pos=sk.center, removeFrame=360)

Sketch().play()</pre>

<p>The image to which the effects are applied has been configured to have a <code>removeFrame</code> property equal to the last frame of the transition. This will cause the image to be removed from the sketch as soon as it has finished “dissolving out”.</p>

<h4>Base Class</h4><div class="Indent">
<p><code>Effect</code>: This is the abstract base class for all effects.</p>
</div>

<h4>Assignable Properties</h4><div class="Indent">
	<p><code class="Hilite">fill</code>: A color to use as a replacement color for the effect.</p>
	<p><code class="Hilite">remove</code>: A <code>bool</code> that specifies whether to delete the effect from the graphic’s <code>effects</code> list when it is complete; default <code>True</code>.</p>
</div>

<h4>Static Methods</h4><div class="Indent">
	<p><code><span class="Hilite">adjust_time</span>(t)</code> → <code>float</code>: This function controls the timing of the transition. By default, the transition proceeds linearly with the sketch frame count. You can override this method to change the timing. For example, a function that returns <code>t**2</code> would proceed slower when <code>t</code> is closer to 0 and faster when close to 1.</p>
		<div class="Indent">
		<p><code class="Hilite">t</code>: A value between 0 and 1 specifying how far into the transition the current sketch frame is. For example, if a transition occurs between frames 100 and 200, <code>t</code> will have a value of 0.5 on frame 150.</p>
		</div>

	<p><code><span class="Hilite">shift</span>(img, dt, reverse=False)</code> → <code>img</code>: Shift the timing of a graphic’s effects.</p>
		<div class="Indent">
		<p><code class="Hilite">img</code>: An image or another instance of <code>Graphic</code> to which the effect is to be applied..</p>
		<p><code class="Hilite">dt</code>: The timing, in frames, by which to shift the effect start and end.</p>
		<p><code class="Hilite">reverse</code>: Specifies whether to reverse the order of the start and end times of the transition.</p>
		</div>
</div>

<h4>Instance Methods</h4><div class="Indent">
	<p><code><span class="Hilite">apply</span>(img, n=0)</code> → <code>pygame.Surface</code>: Apply an effect.</p>
		<div class="Indent">
		<p><code class="Hilite">img</code>: The original image as an <code>Image</code> or <code>pygame.Surface</code> instance, or an object that can contains a surface as its <code>image</code> attribute.</p>
		<p><code class="Hilite">n</code>: The extent of the effect as a number between 0 (full effect) and 1 (original image).</p>
		</div>
	<p><code><span class="Hilite">config</span>(**kwargs)</code> → <code>self</code>: Set one or more attributes of the effect.</p>
	<p><code><span class="Hilite">time</span>(t0, t1)</code> → <code>self</code>: Specifying the timing for applying the effect as a transition.</p>
		<div class="Indent">
		<p><code class="Hilite">t0</code>: The frame number at which the effect is fully applied.</p>
		<p><code class="Hilite">t1</code>: The frame number at which the effect is complete and the original image is to be used.</p>
		</div>
</div>

<h4>Subclass Constructors</h4>
	<p>There are additional effects defined in the <a class="Hilite Code" href="javascript:goNode('math')">effect.math</a> and <a class="Hilite Code" href="javascript:goNode('stamp')">effect.stamp</a> modules.</p>
	<div class="Indent">
	<p><code><span class="Hilite">Assemble</span>(grid=(16, 9), angles=(0, 360), **kwargs)</code>: Assemble the image from small rectangular tiles that fly in from outside the graphic.</p>
		<div class="Indent">
		<p><code class="Hilite">grid</code>: A 2-tuple or 2-list specifying the number of rows and columns of tiles.</p>
		<p><code class="Hilite">angles</code>: A range of angles in degrees specifying the direction of motion of the tiles.</p>
		<p><code class="Hilite">kwargs</code>: Additional attributes to set, such as <code>fill</code>, <code>remove</code> or <code>adjust_time</code>.</p>
		</div>
	<p><code><span class="Hilite">Bar</span>()</code>: Draws a solid bar along the boundary between the transparent and opaque parts of the image. Instances have the following additional properties that can be set by calling the <code>config</code> method:</p>
		<div class="Indent">
		<p><code class="Hilite">color</code>: The color of bar.</p>
		<p><code class="Hilite">invert</code>: When <code>True</code> the bar will be horizontal rather than vertical.</p>
		<p><code class="Hilite">reverse</code>: Specifies whether the bar moves in the negative direction rather than the positive default.</p>
		<p><code class="Hilite">width</code>: The width of bar as a fraction of the image width; default <code>0.08</code>.</p>
		</div>

	<p><code><span class="Hilite">Checkboard</span>()</code>: Creates a checkerboard effect. Instances have the following additional properties that can be set by calling the <code>config</code> method:</p>
		<div class="Indent">
		<p><code class="Hilite">grid</code>: Specifies the size of the checkerboard grid; default <code>(8, 8)</code>.</p>
		<p><code class="Hilite">vel</code>: A four-tuple specifying the velocity of the grid squares. The first two values describe the <em>x</em> and <em>y</em> velocities for the first half of the effect (applied to the odd squares) and the last two values refer to the second half of the effect (applied to the even squares). Values of ±1 correspond to the “normal” speed of the effect. The default is <code>(0, 1, 0, 1)</code>, which moves the squares in the positive <em>y</em> direction at the speed needed to synchronize the motion with the effect timing.</p>
		</div>
	
	<p><code><span class="Hilite">Dissolve</span>()</code>: Dissolve the image in or out from transparency (default) or another color as specified by the <code>fill</code> property. The <code>fill</code> property can be set to <code>True</code> to fill each pixel with a random color (may be slow).</p>
	<p><code><span class="Hilite">Pixelate</span>(size, **kwargs)</code>: Pixelate the image. </p>
		<div class="Indent">
		<p><code class="Hilite">size</code>: The size (in pixels) of the sqaures in the pixelated image.</p>
		<p><code class="Hilite">kwargs</code>: Additional attributes to set.</p>
		</div>
	<p><code><span class="Hilite">Squash</span>(start=CENTER, **kwargs)</code>: Apply a squash transition from any side, corner, or center.</p>
		<div class="Indent">
		<p><code class="Hilite">start</code>: Specifies the location from which the effect begins. Use the anchor constants (<code>TOP</code>, <code>TOPLEFT</code>, etc.) defined in the <a class="Code" href="javascript:goNode('init')">sc8pr</a> module.</p>
		<p><code class="Hilite">kwargs</code>: Additional attributes to set.</p>
		</div>
	<p><code><span class="Hilite">Tint</span>()</code>: Tints the RGBA values of the image toward the color specified by the <code>fill</code> property (transparent by default).</p>
		
		<!-- Bar Checkerboard-->
</div>

</article>
